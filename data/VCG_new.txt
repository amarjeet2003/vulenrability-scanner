POTENTIAL ISSUE: Potentially Unsafe Code - Public Class Not Declared as Final
Line: 29 - C:\Users\Z004H61R\Downloads\Mapping_Conversion_V2\Mapping_Conversion_V2\VulnerabilityScannerv4\CodeSample3\EmbeddedMaliciousCode.java
The class is not declared as final as per OWASP recommendations. It is considered best practice to make classes final where possible and practical (i.e. It has no classes which inherit from it). Non-Final classes can allow an attacker to extend a class in a malicious manner. Manually inspect the code to determine whether or not it is practical to make this class final.
public class CWE506_Embedded_Malicious_Code__aes_encrypted_payload_03 extends AbstractTestCase

SUSPICIOUS COMMENT: Comment Indicates Potentially Unfinished Code - 
 Line: 38 - C:\Users\Z004H61R\Downloads\Mapping_Conversion_V2\Mapping_Conversion_V2\VulnerabilityScannerv4\CodeSample3\EmbeddedMaliciousCode.java
INCIDENTAL: Hardcoded crypto */

LOW: Potentially Unsafe Code - Operation on Primitive Data Type
Line: 45 - C:\Users\Z004H61R\Downloads\Mapping_Conversion_V2\Mapping_Conversion_V2\VulnerabilityScannerv4\CodeSample3\EmbeddedMaliciousCode.java
The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.
            for (int i = 0; i < payloadLength; i+=2)

LOW: Potentially Unsafe Code - Operation on Primitive Data Type
Line: 47 - C:\Users\Z004H61R\Downloads\Mapping_Conversion_V2\Mapping_Conversion_V2\VulnerabilityScannerv4\CodeSample3\EmbeddedMaliciousCode.java
The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.
                data[i/2] = (byte)((Character.digit(payload.charAt(i), 16) << 4) + Character.digit(payload.charAt(i+1), 16));

HIGH: Potentially Unsafe Code - java.lang.Runtime.exec Gets Path from Variable
Line: 52 - C:\Users\Z004H61R\Downloads\Mapping_Conversion_V2\Mapping_Conversion_V2\VulnerabilityScannerv4\CodeSample3\EmbeddedMaliciousCode.java
The pathname used in the call appears to be loaded from a variable. Check the code manually to ensure that malicious filenames cannot be submitted by an attacker.
                Runtime.getRuntime().exec(decryptedPayload);

HIGH: Potentially Unsafe Code - java.lang.Runtime.exec Gets Path from Variable
Line: 76 - C:\Users\Z004H61R\Downloads\Mapping_Conversion_V2\Mapping_Conversion_V2\VulnerabilityScannerv4\CodeSample3\EmbeddedMaliciousCode.java
The pathname used in the call appears to be loaded from a variable. Check the code manually to ensure that malicious filenames cannot be submitted by an attacker.
                Runtime.getRuntime().exec(decodedPayload);

HIGH: Potentially Unsafe Code - java.lang.Runtime.exec Gets Path from Variable
Line: 95 - C:\Users\Z004H61R\Downloads\Mapping_Conversion_V2\Mapping_Conversion_V2\VulnerabilityScannerv4\CodeSample3\EmbeddedMaliciousCode.java
The pathname used in the call appears to be loaded from a variable. Check the code manually to ensure that malicious filenames cannot be submitted by an attacker.
                Runtime.getRuntime().exec(decodedPayload);

POTENTIAL ISSUE: Potentially Unsafe Code - Public Class Not Declared as Final
Line: 31 - C:\Users\Z004H61R\Downloads\Mapping_Conversion_V2\Mapping_Conversion_V2\VulnerabilityScannerv4\CodeSample3\IntegerUnderflow.java
The class is not declared as final as per OWASP recommendations. It is considered best practice to make classes final where possible and practical (i.e. It has no classes which inherit from it). Non-Final classes can allow an attacker to extend a class in a malicious manner. Manually inspect the code to determine whether or not it is practical to make this class final.
public class CWE191_Integer_Underflow__int_URLConnection_multiply_06 extends AbstractTestCase

SUSPICIOUS COMMENT: Comment Indicates Potentially Unfinished Code - 
 Line: 133 - C:\Users\Z004H61R\Downloads\Mapping_Conversion_V2\Mapping_Conversion_V2\VulnerabilityScannerv4\CodeSample3\IntegerUnderflow.java
FIX: Use a hardcoded number that won't cause underflow, overflow, divide by zero, or loss-of-precision issues */

SUSPICIOUS COMMENT: Comment Indicates Potentially Unfinished Code - 
 Line: 155 - C:\Users\Z004H61R\Downloads\Mapping_Conversion_V2\Mapping_Conversion_V2\VulnerabilityScannerv4\CodeSample3\IntegerUnderflow.java
FIX: Use a hardcoded number that won't cause underflow, overflow, divide by zero, or loss-of-precision issues */

POTENTIAL ISSUE: Potentially Unsafe Code - Public Class Not Declared as Final
Line: 34 - C:\Users\Z004H61R\Downloads\Mapping_Conversion_V2\Mapping_Conversion_V2\VulnerabilityScannerv4\CodeSample3\LDAPInjection.java
The class is not declared as final as per OWASP recommendations. It is considered best practice to make classes final where possible and practical (i.e. It has no classes which inherit from it). Non-Final classes can allow an attacker to extend a class in a malicious manner. Manually inspect the code to determine whether or not it is practical to make this class final.
public class CWE90_LDAP_Injection__connect_tcp_04 extends AbstractTestCase

SUSPICIOUS COMMENT: Comment Indicates Potentially Unfinished Code - 
 Line: 180 - C:\Users\Z004H61R\Downloads\Mapping_Conversion_V2\Mapping_Conversion_V2\VulnerabilityScannerv4\CodeSample3\LDAPInjection.java
FIX: Use a hardcoded string */

SUSPICIOUS COMMENT: Comment Indicates Potentially Unfinished Code - 
 Line: 240 - C:\Users\Z004H61R\Downloads\Mapping_Conversion_V2\Mapping_Conversion_V2\VulnerabilityScannerv4\CodeSample3\LDAPInjection.java
FIX: Use a hardcoded string */

POTENTIAL ISSUE: Potentially Unsafe Code - Public Class Not Declared as Final
Line: 20 - C:\Users\Z004H61R\Downloads\Mapping_Conversion_V2\Mapping_Conversion_V2\VulnerabilityScannerv4\CodeSample3\LogicTimeBomb.java
The class is not declared as final as per OWASP recommendations. It is considered best practice to make classes final where possible and practical (i.e. It has no classes which inherit from it). Non-Final classes can allow an attacker to extend a class in a malicious manner. Manually inspect the code to determine whether or not it is practical to make this class final.
public class CWE511_Logic_Time_Bomb__counter_07 extends AbstractTestCase

LOW: Potentially Unsafe Code - Operation on Primitive Data Type
Line: 40 - C:\Users\Z004H61R\Downloads\Mapping_Conversion_V2\Mapping_Conversion_V2\VulnerabilityScannerv4\CodeSample3\LogicTimeBomb.java
The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.
                count++;

LOW: Potentially Unsafe Code - Operation on Primitive Data Type
Line: 66 - C:\Users\Z004H61R\Downloads\Mapping_Conversion_V2\Mapping_Conversion_V2\VulnerabilityScannerv4\CodeSample3\LogicTimeBomb.java
The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.
                count++;

LOW: Potentially Unsafe Code - Operation on Primitive Data Type
Line: 86 - C:\Users\Z004H61R\Downloads\Mapping_Conversion_V2\Mapping_Conversion_V2\VulnerabilityScannerv4\CodeSample3\LogicTimeBomb.java
The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.
                count++;

POTENTIAL ISSUE: Potentially Unsafe Code - Public Class Not Declared as Final
Line: 22 - C:\Users\Z004H61R\Downloads\Mapping_Conversion_V2\Mapping_Conversion_V2\VulnerabilityScannerv4\CodeSample3\MissingPasswordMasking.java
The class is not declared as final as per OWASP recommendations. It is considered best practice to make classes final where possible and practical (i.e. It has no classes which inherit from it). Non-Final classes can allow an attacker to extend a class in a malicious manner. Manually inspect the code to determine whether or not it is practical to make this class final.
public class CWE549_Missing_Password_Masking__Servlet_01 extends AbstractTestCaseServlet

POTENTIAL ISSUE: Potentially Unsafe Code - Public Class Not Declared as Final
Line: 28 - C:\Users\Z004H61R\Downloads\Mapping_Conversion_V2\Mapping_Conversion_V2\VulnerabilityScannerv4\CodeSample3\NonSerializableinSession.java
The class is not declared as final as per OWASP recommendations. It is considered best practice to make classes final where possible and practical (i.e. It has no classes which inherit from it). Non-Final classes can allow an attacker to extend a class in a malicious manner. Manually inspect the code to determine whether or not it is practical to make this class final.
public class CWE579_Non_Serializable_in_Session__Servlet_01 extends AbstractTestCaseServlet 

STANDARD: Potentially Unsafe Code - Class Contains Public Variable: badString
Line: 34 - C:\Users\Z004H61R\Downloads\Mapping_Conversion_V2\Mapping_Conversion_V2\VulnerabilityScannerv4\CodeSample3\NonSerializableinSession.java
The class variable may be accessed and modified by other classes without the use of getter/setter methods. It is considered unsafe to have public fields or methods in a class unless required as any method, field, or class that is not private is a potential avenue of attack. It is safer to provide accessor methods to variables in order to limit their accessibility.
        public String badString = "Bad";

STANDARD: Potentially Unsafe Code - Class Contains Public Variable: goodString
Line: 40 - C:\Users\Z004H61R\Downloads\Mapping_Conversion_V2\Mapping_Conversion_V2\VulnerabilityScannerv4\CodeSample3\NonSerializableinSession.java
The class variable may be accessed and modified by other classes without the use of getter/setter methods. It is considered unsafe to have public fields or methods in a class unless required as any method, field, or class that is not private is a potential avenue of attack. It is safer to provide accessor methods to variables in order to limit their accessibility.
        public String goodString = "Good";


