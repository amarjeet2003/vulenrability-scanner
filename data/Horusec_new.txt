
time="2024-09-04T12:42:11+05:30" level=warning msg="Horusec will return a timeout after 600 seconds. This time can be customized in the cli settings."

time="2024-09-04T12:42:11+05:30" level=warning msg="{HORUSEC_CLI} PLEASE DON'T REMOVE \".horusec\" FOLDER BEFORE THE ANALYSIS FINISH! Don’t worry, we’ll remove it after the analysis ends automatically! Project sent to folder in location: [C:\\Users\\Z004H61R\\Downloads\\Mapping_Conversion_V2\\Mapping_Conversion_V2\\VulnerabilityScannerv4\\CodeSample3\\.horusec\\fc790037-1006-4cfc-b3eb-a8720afdc73f]"

⣾ Scanning code ...                    ⣽ Scanning code ...                    

==================================================================================

HORUSEC ENDED THE ANALYSIS WITH STATUS OF "success" AND WITH THE FOLLOWING RESULTS:

==================================================================================

Analysis StartedAt: 2024-09-04 12:42:11
Analysis FinishedAt: 2024-09-04 12:42:11

==================================================================================

Language: Leaks
Severity: CRITICAL
Line: 39
Column: 46
SecurityTool: HorusecEngine
Confidence: MEDIUM
File: C:\Users\Z004H61R\Downloads\Mapping_Conversion_V2\Mapping_Conversion_V2\VulnerabilityScannerv4\CodeSample3\EmbeddedMaliciousCode.java
Code: SecretKeySpec secretKeySpec = new SecretKeySpec("ABCDEFGHABCDEFGH".getBytes("UTF-8"), "AES");
RuleID: HS-LEAKS-25
Type: Vulnerability
ReferenceHash: 3287328d37ff2b5386c61a61c5c7c8de9928fc3eb4ac655045c3de9e32e05819
Details: (1/1) * Possible vulnerability detected: Potential Hard-coded credential
The software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.

==================================================================================

Language: Java
Severity: HIGH
Line: 20
Column: 0
SecurityTool: HorusecEngine
Confidence: LOW
File: C:\Users\Z004H61R\Downloads\Mapping_Conversion_V2\Mapping_Conversion_V2\VulnerabilityScannerv4\CodeSample3\MissingPasswordMasking.java
Code: import javax.servlet.http.*;
RuleID: HS-JAVA-96
Type: Vulnerability
ReferenceHash: 5a73c092de8729f487ecb57d891e3dcb8ea3a1e3fb0b1876dba0ca301c501491
Details: (1/1) * Possible vulnerability detected: Web applications should not have a main method
Having a main method in a web application opens a door to the application logic that an attacker may never be able to reach (but watch out if one does!), but it is a sloppy practice and indicates that other problems may be present. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.

==================================================================================

Language: Java
Severity: HIGH
Line: 20
Column: 0
SecurityTool: HorusecEngine
Confidence: LOW
File: C:\Users\Z004H61R\Downloads\Mapping_Conversion_V2\Mapping_Conversion_V2\VulnerabilityScannerv4\CodeSample3\EmbeddedMaliciousCode.java
Code: import javax.servlet.http.*;
RuleID: HS-JAVA-96
Type: Vulnerability
ReferenceHash: 54aaf0c7a11f692e38c3082d647c0799a721943825646912ecd5ff36232c1778
Details: (1/1) * Possible vulnerability detected: Web applications should not have a main method
Having a main method in a web application opens a door to the application logic that an attacker may never be able to reach (but watch out if one does!), but it is a sloppy practice and indicates that other problems may be present. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.

==================================================================================

Language: Java
Severity: HIGH
Line: 37
Column: 31
SecurityTool: HorusecEngine
Confidence: LOW
File: C:\Users\Z004H61R\Downloads\Mapping_Conversion_V2\Mapping_Conversion_V2\VulnerabilityScannerv4\CodeSample3\EmbeddedMaliciousCode.java
Code: Cipher aesCipher = Cipher.getInstance("AES");
RuleID: HS-JAVA-110
Type: Vulnerability
ReferenceHash: 7ab1f78af300c66f247eaecadd21fd0369c69e4c4cbe0bfbf5e261352642cdba
Details: (1/1) * Possible vulnerability detected: Weak block mode for Cryptographic Hash Function
A weak ECB, (a.k.a 'block mode') was found in one of your Ciphers. Always use a strong, high entropy hash, for example the SHA-512 with salt options. For more information check CWE-327 (https://cwe.mitre.org/data/definitions/327.html), CWE-719 (https://cwe.mitre.org/data/definitions/719.html), CWE-326 (https://cwe.mitre.org/data/definitions/326.html) and CWE-780 (https://cwe.mitre.org/data/definitions/780.html) for deeper details on how to fix it.

==================================================================================

Language: Java
Severity: HIGH
Line: 26
Column: 7
SecurityTool: HorusecEngine
Confidence: LOW
File: C:\Users\Z004H61R\Downloads\Mapping_Conversion_V2\Mapping_Conversion_V2\VulnerabilityScannerv4\CodeSample3\EmbeddedMaliciousCode.java
Code: import javax.crypto.Cipher;
RuleID: HS-JAVA-123
Type: Vulnerability
ReferenceHash: d57b08ae33d0b45c420e9bcd9e8336820271a5949e61216a6d8dcd3a2bb9a0de
Details: (1/1) * Possible vulnerability detected:  Crypto import
 Crypto import

==================================================================================

Language: Java
Severity: HIGH
Line: 27
Column: 7
SecurityTool: HorusecEngine
Confidence: LOW
File: C:\Users\Z004H61R\Downloads\Mapping_Conversion_V2\Mapping_Conversion_V2\VulnerabilityScannerv4\CodeSample3\EmbeddedMaliciousCode.java
Code: import javax.crypto.spec.SecretKeySpec;
RuleID: HS-JAVA-123
Type: Vulnerability
ReferenceHash: 0bff213f06b7649044da736d1800415500383314d80f35e8e6687a5b2e22059b
Details: (1/1) * Possible vulnerability detected:  Crypto import
 Crypto import

==================================================================================

Language: Java
Severity: HIGH
Line: 20
Column: 0
SecurityTool: HorusecEngine
Confidence: LOW
File: C:\Users\Z004H61R\Downloads\Mapping_Conversion_V2\Mapping_Conversion_V2\VulnerabilityScannerv4\CodeSample3\LDAPInjection.java
Code: import javax.servlet.http.*;
RuleID: HS-JAVA-96
Type: Vulnerability
ReferenceHash: 5f28b521b92349de16c3b3fcd99bea302b9a990b9eef02ae4f84198928e179b6
Details: (1/1) * Possible vulnerability detected: Web applications should not have a main method
Having a main method in a web application opens a door to the application logic that an attacker may never be able to reach (but watch out if one does!), but it is a sloppy practice and indicates that other problems may be present. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.

==================================================================================

Language: Java
Severity: HIGH
Line: 129
Column: 70
SecurityTool: HorusecEngine
Confidence: LOW
File: C:\Users\Z004H61R\Downloads\Mapping_Conversion_V2\Mapping_Conversion_V2\VulnerabilityScannerv4\CodeSample3\LDAPInjection.java
Code: NamingEnumeration<SearchResult> answer = directoryContext.search("", search, null);
RuleID: HS-JAVA-141
Type: Vulnerability
ReferenceHash: cf130c3e326367d8cbeb53259a61087d46ff2a8a528b21dad1040ec76f868b1d
Details: (1/1) * Possible vulnerability detected: Potential LDAP Injection
Just like SQL, all inputs passed to an LDAP query need to be passed in safely. Unfortunately, LDAP doesn't have prepared statement interfaces like SQL. Therefore, the primary defense against LDAP injection is strong input validation of any untrusted data before including it in an LDAP query. For more information checkout the CWE-90 (https://cwe.mitre.org/data/definitions/90.html) advisory.

==================================================================================

Language: Java
Severity: HIGH
Line: 21
Column: 0
SecurityTool: HorusecEngine
Confidence: LOW
File: C:\Users\Z004H61R\Downloads\Mapping_Conversion_V2\Mapping_Conversion_V2\VulnerabilityScannerv4\CodeSample3\IntegerUnderflow.java
Code: import javax.servlet.http.*;
RuleID: HS-JAVA-96
Type: Vulnerability
ReferenceHash: 8b90b72fdfdcbdef3146d5d24036ebc512176f20d57f31972dbb6ecaa70c1ba8
Details: (1/1) * Possible vulnerability detected: Web applications should not have a main method
Having a main method in a web application opens a door to the application logic that an attacker may never be able to reach (but watch out if one does!), but it is a sloppy practice and indicates that other problems may be present. For more information checkout the CWE-489 (https://cwe.mitre.org/data/definitions/489.html) advisory.

==================================================================================

Language: Java
Severity: MEDIUM
Line: 38
Column: 28
SecurityTool: HorusecEngine
Confidence: HIGH
File: C:\Users\Z004H61R\Downloads\Mapping_Conversion_V2\Mapping_Conversion_V2\VulnerabilityScannerv4\CodeSample3\LogicTimeBomb.java
Code: Runtime.getRuntime().exec("c:\\windows\\system32\\evil.exe");
RuleID: HS-JAVA-39
Type: Vulnerability
ReferenceHash: 885db01d03b9fc2d1bf83090bb12ea3b3db0ee101e785bcea01fcea3dd8d80ba
Details: (1/1) * Possible vulnerability detected: Execute OS Command
Execute OS Command. For more information checkout the CWE-78 (https://cwe.mitre.org/data/definitions/78.html) advisory.

==================================================================================

Language: Java
Severity: MEDIUM
Line: 52
Column: 24
SecurityTool: HorusecEngine
Confidence: HIGH
File: C:\Users\Z004H61R\Downloads\Mapping_Conversion_V2\Mapping_Conversion_V2\VulnerabilityScannerv4\CodeSample3\EmbeddedMaliciousCode.java
Code: Runtime.getRuntime().exec(decryptedPayload);
RuleID: HS-JAVA-39
Type: Vulnerability
ReferenceHash: 88602460b5e136a189b80ec07cf53f9e292e77ef5883d3f797f0c7cedba6df95
Details: (1/1) * Possible vulnerability detected: Execute OS Command
Execute OS Command. For more information checkout the CWE-78 (https://cwe.mitre.org/data/definitions/78.html) advisory.

==================================================================================

Language: Java
Severity: LOW
Line: 58
Column: 29
SecurityTool: HorusecEngine
Confidence: LOW
File: C:\Users\Z004H61R\Downloads\Mapping_Conversion_V2\Mapping_Conversion_V2\VulnerabilityScannerv4\CodeSample3\LDAPInjection.java
Code: socket = new Socket("host.example.org", 39544);
RuleID: HS-JAVA-41
Type: Vulnerability
ReferenceHash: 0cdc6066b73bc411259df7dd38293219bfadd1a722a34e9ccd17944f8c179cc9
Details: (1/1) * Possible vulnerability detected: TCP Socket
TCP Socket

==================================================================================

In this analysis, a total of 12 possible vulnerabilities were found and we classified them into:
Total of Vulnerability CRITICAL is: 1
Total of Vulnerability HIGH is: 8
Total of Vulnerability MEDIUM is: 2
Total of Vulnerability LOW is: 1

==================================================================================


time="2024-09-04T12:42:11+05:30" level=warning msg="{HORUSEC_CLI} No authorization token was found, your code it is not going to be sent to horusec. Please enter a token with the -a flag to configure and save your analysis"

time="2024-09-04T12:42:11+05:30" level=warning msg="{HORUSEC_CLI} 12 VULNERABILITIES WERE FOUND IN YOUR CODE SENT TO HORUSEC, TO SEE MORE DETAILS USE THE LOG LEVEL AS DEBUG AND TRY AGAIN"

time="2024-09-04T12:42:11+05:30" level=warning msg="{HORUSEC_CLI} Horusec not show info vulnerabilities in this analysis, to see info vulnerabilities add option \"--information-severity=true\". For more details use (horusec start --help) command."
