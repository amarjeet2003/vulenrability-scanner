Severity,Title,File,Line,Code,Details,CWE ID
POTENTIAL ISSUE,Public Class Not Declared as Final,embeddedmaliciouscode.java,29,public class CWE506_Embedded_Malicious_Code__aes_encrypted_payload_03 extends AbstractTestCase,The class is not declared as final as per OWASP recommendations. It is considered best practice to make classes final where possible and practical (i.e. It has no classes which inherit from it). Non-Final classes can allow an attacker to extend a class in a malicious manner. Manually inspect the code to determine whether or not it is practical to make this class final.,N/A
SUSPICIOUS COMMENT,,embeddedmaliciouscode.java,38,,INCIDENTAL: Hardcoded crypto */,N/A
LOW,Operation on Primitive Data Type,embeddedmaliciouscode.java,45,for (int i = 0; i < payloadLength; i+=2),The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.,N/A
LOW,Operation on Primitive Data Type,embeddedmaliciouscode.java,47,"data[i/2] = (byte)((Character.digit(payload.charAt(i), 16) << 4) + Character.digit(payload.charAt(i+1), 16));",The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.,N/A
HIGH,java.lang.Runtime.exec Gets Path from Variable,embeddedmaliciouscode.java,52,Runtime.getRuntime().exec(decryptedPayload);,The pathname used in the call appears to be loaded from a variable. Check the code manually to ensure that malicious filenames cannot be submitted by an attacker.,N/A
HIGH,java.lang.Runtime.exec Gets Path from Variable,embeddedmaliciouscode.java,76,Runtime.getRuntime().exec(decodedPayload);,The pathname used in the call appears to be loaded from a variable. Check the code manually to ensure that malicious filenames cannot be submitted by an attacker.,N/A
HIGH,java.lang.Runtime.exec Gets Path from Variable,embeddedmaliciouscode.java,95,Runtime.getRuntime().exec(decodedPayload);,The pathname used in the call appears to be loaded from a variable. Check the code manually to ensure that malicious filenames cannot be submitted by an attacker.,N/A
POTENTIAL ISSUE,Public Class Not Declared as Final,integerunderflow.java,31,public class CWE191_Integer_Underflow__int_URLConnection_multiply_06 extends AbstractTestCase,The class is not declared as final as per OWASP recommendations. It is considered best practice to make classes final where possible and practical (i.e. It has no classes which inherit from it). Non-Final classes can allow an attacker to extend a class in a malicious manner. Manually inspect the code to determine whether or not it is practical to make this class final.,N/A
SUSPICIOUS COMMENT,,integerunderflow.java,133,,"FIX: Use a hardcoded number that won't cause underflow, overflow, divide by zero, or loss-of-precision issues */",N/A
SUSPICIOUS COMMENT,,integerunderflow.java,155,,"FIX: Use a hardcoded number that won't cause underflow, overflow, divide by zero, or loss-of-precision issues */",N/A
POTENTIAL ISSUE,Public Class Not Declared as Final,ldapinjection.java,34,public class CWE90_LDAP_Injection__connect_tcp_04 extends AbstractTestCase,The class is not declared as final as per OWASP recommendations. It is considered best practice to make classes final where possible and practical (i.e. It has no classes which inherit from it). Non-Final classes can allow an attacker to extend a class in a malicious manner. Manually inspect the code to determine whether or not it is practical to make this class final.,N/A
SUSPICIOUS COMMENT,,ldapinjection.java,180,,FIX: Use a hardcoded string */,N/A
SUSPICIOUS COMMENT,,ldapinjection.java,240,,FIX: Use a hardcoded string */,N/A
POTENTIAL ISSUE,Public Class Not Declared as Final,logictimebomb.java,20,public class CWE511_Logic_Time_Bomb__counter_07 extends AbstractTestCase,The class is not declared as final as per OWASP recommendations. It is considered best practice to make classes final where possible and practical (i.e. It has no classes which inherit from it). Non-Final classes can allow an attacker to extend a class in a malicious manner. Manually inspect the code to determine whether or not it is practical to make this class final.,N/A
LOW,Operation on Primitive Data Type,logictimebomb.java,40,count++;,The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.,N/A
LOW,Operation on Primitive Data Type,logictimebomb.java,66,count++;,The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.,N/A
LOW,Operation on Primitive Data Type,logictimebomb.java,86,count++;,The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.,N/A
POTENTIAL ISSUE,Public Class Not Declared as Final,missingpasswordmasking.java,22,public class CWE549_Missing_Password_Masking__Servlet_01 extends AbstractTestCaseServlet,The class is not declared as final as per OWASP recommendations. It is considered best practice to make classes final where possible and practical (i.e. It has no classes which inherit from it). Non-Final classes can allow an attacker to extend a class in a malicious manner. Manually inspect the code to determine whether or not it is practical to make this class final.,N/A
POTENTIAL ISSUE,Public Class Not Declared as Final,nonserializableinsession.java,28,public class CWE579_Non_Serializable_in_Session__Servlet_01 extends AbstractTestCaseServlet,The class is not declared as final as per OWASP recommendations. It is considered best practice to make classes final where possible and practical (i.e. It has no classes which inherit from it). Non-Final classes can allow an attacker to extend a class in a malicious manner. Manually inspect the code to determine whether or not it is practical to make this class final.,N/A
STANDARD,Class Contains Public Variable: badString,nonserializableinsession.java,34,"public String badString = ""Bad"";","The class variable may be accessed and modified by other classes without the use of getter/setter methods. It is considered unsafe to have public fields or methods in a class unless required as any method, field, or class that is not private is a potential avenue of attack. It is safer to provide accessor methods to variables in order to limit their accessibility.",N/A
STANDARD,Class Contains Public Variable: goodString,nonserializableinsession.java,40,"public String goodString = ""Good"";","The class variable may be accessed and modified by other classes without the use of getter/setter methods. It is considered unsafe to have public fields or methods in a class unless required as any method, field, or class that is not private is a potential avenue of attack. It is safer to provide accessor methods to variables in order to limit their accessibility.",N/A
